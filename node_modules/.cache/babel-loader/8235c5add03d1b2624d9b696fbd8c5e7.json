{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\FRONT-END\\\\rockeatseat\\\\dtmoney\\\\src\\\\TransactionsContext.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useEffect, useState } from 'react';\nimport { api } from './services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TransactionsContext = /*#__PURE__*/createContext([]);\nexport function TransactionProvider(_ref) {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [transactions, setTransactions] = useState([]);\n  useEffect(() => {\n    api.get('transactions').then(response => setTransactions(response.data.transactions));\n  }, []);\n\n  function createTransaction(transaction) {\n    api.post('/transactions', transaction);\n  }\n\n  return /*#__PURE__*/_jsxDEV(TransactionsContext.Provider, {\n    value: {\n      transactions,\n      createTransaction\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n}\n\n_s(TransactionProvider, \"tSC852gg/pAfbHr6jYEePbawnUU=\");\n\n_c = TransactionProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"TransactionProvider\");","map":{"version":3,"names":["createContext","useEffect","useState","api","TransactionsContext","TransactionProvider","children","transactions","setTransactions","get","then","response","data","createTransaction","transaction","post"],"sources":["C:/xampp/htdocs/FRONT-END/rockeatseat/dtmoney/src/TransactionsContext.tsx"],"sourcesContent":["import { createContext, useEffect, useState, ReactNode } from 'react';\r\nimport { api } from './services/api';\r\n\r\ninterface Transaction {\r\n    id: number;\r\n    title: string;\r\n    amount: number;\r\n    type: string;\r\n    category: string;\r\n    createAt: string;\r\n}\r\n\r\ninterface TransactionsContexData {\r\n\r\n}\r\n\r\ntype TransactionInput = Omit<Transaction, 'id' | 'createAt' >;\r\n\r\ninterface TransactionProviderProps{\r\n    children: ReactNode;\r\n}\r\n\r\nexport const TransactionsContext = createContext<Transaction[]>([]);\r\n\r\nexport function TransactionProvider({ children }: TransactionProviderProps) {\r\n    const[transactions, setTransactions] = useState<Transaction[]>([]);\r\n\r\n    useEffect(() => {   \r\n        api.get('transactions')\r\n            .then(response => setTransactions(response.data.transactions))\r\n    }, []);\r\n\r\n    function createTransaction(transaction: TransactionInput) {\r\n        api.post('/transactions', transaction)\r\n    }\r\n\r\n    return (\r\n        <TransactionsContext.Provider value={{ transactions, createTransaction }}>\r\n            {children}\r\n        </TransactionsContext.Provider>\r\n    );\r\n}"],"mappings":";;;AAAA,SAASA,aAAT,EAAwBC,SAAxB,EAAmCC,QAAnC,QAA8D,OAA9D;AACA,SAASC,GAAT,QAAoB,gBAApB;;AAqBA,OAAO,MAAMC,mBAAmB,gBAAGJ,aAAa,CAAgB,EAAhB,CAAzC;AAEP,OAAO,SAASK,mBAAT,OAAqE;EAAA;;EAAA,IAAxC;IAAEC;EAAF,CAAwC;EACxE,MAAK,CAACC,YAAD,EAAeC,eAAf,IAAkCN,QAAQ,CAAgB,EAAhB,CAA/C;EAEAD,SAAS,CAAC,MAAM;IACZE,GAAG,CAACM,GAAJ,CAAQ,cAAR,EACKC,IADL,CACUC,QAAQ,IAAIH,eAAe,CAACG,QAAQ,CAACC,IAAT,CAAcL,YAAf,CADrC;EAEH,CAHQ,EAGN,EAHM,CAAT;;EAKA,SAASM,iBAAT,CAA2BC,WAA3B,EAA0D;IACtDX,GAAG,CAACY,IAAJ,CAAS,eAAT,EAA0BD,WAA1B;EACH;;EAED,oBACI,QAAC,mBAAD,CAAqB,QAArB;IAA8B,KAAK,EAAE;MAAEP,YAAF;MAAgBM;IAAhB,CAArC;IAAA,UACKP;EADL;IAAA;IAAA;IAAA;EAAA,QADJ;AAKH;;GAjBeD,mB;;KAAAA,mB"},"metadata":{},"sourceType":"module"}